// Generated by CoffeeScript 1.7.1

/*
 * Скрипт сгенерирован из файла main.coffee, находящегося в папке source-scripts
 */

(function() {
  var addEvent, after, log, r;

  addEvent = function(evnt, elem, func) {
    if (elem.addEventListener) {
      return elem.addEventListener(evnt, func, false);
    } else if (elem.attachEvent) {
      return elem.attachEvent("on" + evnt, func);
    } else {
      return elem[evnt] = func;
    }
  };

  log = function() {
    log.history = log.history || [];
    log.history.push(arguments);
    if (this.console) {
      return console.log(Array.prototype.slice.call(arguments));
    }
  };


  /*!
   * after 1000, -> addSec()
   */

  after = function(ms, fn) {
    return setTimeout(fn, ms);
  };


  /*!
   * r 'plugin', -> block.plugin()
   */

  r = function(m, c) {
    var cb;
    cb = function() {
      if (typeof c === "function") {
        return c.call(this);
      } else {
        return true;
      }
    };
    if (require.defined(m)) {
      return cb();
    } else {
      return require([m], cb);
    }
  };


  /*!
   * IOS Hover/Active
   * На случай, если в body не добавят ontouchstart=""
   */

  addEvent("touchmove", (function(event) {}), false);


  /*!
   * IOS Scale Bug
   */

  (function(doc) {
    var fix, meta, qsa, scales, type;
    fix = function() {
      meta.content = "width=320, minimum-scale=" + scales[0] + ", maximum-scale=" + scales[1];
      return doc.removeEventListener(type, fix, true);
    };
    addEvent = "addEventListener";
    type = "gesturestart";
    qsa = "querySelectorAll";
    scales = [0, 1];
    meta = (qsa in doc ? doc[qsa]("meta[name=viewport]") : []);
    if ((meta = meta[meta.length - 1]) && addEvent in doc) {
      fix();
      scales = [.5, 1];
      return doc[addEvent](type, fix, true);
    }
  })(document);


  /*!
   * После jQuery
   */

  (function($, window) {

    /*!
     * Общие переменные
     */
    var activeClass, closedClass, currentClass, disabledClass, getAutoHeight, hiddenClass, loaders, mediaMax, mediaMid, openedClass;
    disabledClass = 'tpl-state-disabled';
    activeClass = 'tpl-state-active';
    currentClass = 'tpl-state-current';
    openedClass = 'tpl-state-opened';
    closedClass = 'tpl-state-closed';
    hiddenClass = 'tpl-state-hidden';
    mediaMid = 1000;
    mediaMax = 1850;
    loaders = $('.tpl-block-loader');

    /*!
     Узнаём будущую высоту элемента с height:auto
     */
    getAutoHeight = function(el) {
      var autoHeight, startHeight;
      startHeight = el.css('height');
      autoHeight = el.css('height', 'auto').css('height');
      el.css('height', startHeight);
      return autoHeight;
    };

    /*!
     * Триггеры на разрешения экрана
     * $(window).on 'media-min' → < 320px
     * $(window).on 'media-mid' → > 320px < 1850px
     * $(window).on 'media-max' → > 1850px
     * https://github.com/xoxco/breakpoints
     */
    return $(function() {
      var body, getMedia, isMedia, lastMedia, w;
      w = $(window);
      body = $('body');

      /*!
       * @param  {Number} vw [null, 40, 1200, 1300]
       * @return {String}
       */
      getMedia = function(vw) {
        if (vw == null) {
          vw = body.width();
        }
        if (vw >= mediaMid && vw < mediaMax) {
          return 'mediaMid';
        } else if (vw >= mediaMax) {
          return 'mediaMax';
        } else {
          return 'mediaMin';
        }
      };

      /*!
       * @param  {String} sizes ['min', 'mid', 'max', 'mid max']
       * @return {Boolean}
       */
      isMedia = function(sizes) {
        var error, nowMedia;
        error = 0;
        nowMedia = getMedia();
        $.each(sizes.split(' '), function(i, size) {
          if (size !== nowMedia) {
            return error++;
          }
        });
        if (error > 0) {
          return false;
        } else {
          return true;
        }
      };
      lastMedia = getMedia();
      w.on('resize', function() {
        var nowMedia, vw;
        vw = body.width();
        nowMedia = getMedia(vw);
        if (nowMedia !== lastMedia) {
          lastMedia = nowMedia;
          return $(window).trigger(nowMedia);
        }
      });

      /*!
       * Вверх
       */
      $('.tpl-block-rating').each(function() {
        var index;
        index = $(this).index('.tpl-block-rating');
        $(this).addClass('tpl-state-index' + index);
        return true;
      });

      /*!
       * Слайдеры карточек
       * http://www.idangero.us/sliders/swiper
       */
      $(function() {
        var swipers;
        swipers = $('.tpl-block-swiper');
        if (swipers[0]) {
          return r('swiper', function() {
            var addShadows, c, cd, defaultOptions, isMod, removeShadows, swipeIt;
            c = 'tpl-block-swiper';
            cd = false;
            removeShadows = function(e) {
              return after(300, function() {
                if (!cd) {
                  return $(e).removeClass(c + '-container--grabbing');
                } else {
                  return removeShadows(e);
                }
              });
            };
            addShadows = function(e) {
              cd = true;
              $(e).addClass(c + '-container--grabbing');
              return after(500, function() {
                return cd = false;
              });
            };
            isMod = function(node, mod) {
              return node.hasClass(c + '--' + mod);
            };
            swipeIt = function(id, defaultOptions, localOptions) {
              var options, slider;
              options = $.extend({}, defaultOptions, localOptions);
              slider = new Swiper('.' + id, options);
              $('.' + id).data('slider', slider);
              return slider;
            };
            defaultOptions = {
              speed: 200,
              autoplay: '',
              mode: 'horizontal',
              loop: false,
              slidesPerView: 4,
              calculateHeight: false,
              updateOnImagesReady: false,
              DOMAnimation: false,
              grabCursor: true,
              autoResize: true,
              resizeReInit: false,
              cssWidthAndHeight: false,
              wrapperClass: c + '-wrapper',
              slideClass: c + '-item',
              slideActiveClass: c + '-item--active',
              slideVisibleClass: c + '-item--visible',
              slideElement: 'div',
              noSwipingClass: c + '--no-swiping',
              onSlideChangeStart: function(e, a) {
                return addShadows(e.container);
              },
              onSlideChangeEnd: function(e, a) {
                return removeShadows(e.container);
              },
              onTouchStart: function(e, a) {
                return addShadows(e.container);
              },
              onSlideReset: function(e, a) {
                return removeShadows(e.container);
              },
              onFirstInit: function() {
                return $(window).trigger('swiper-first-init');
              }
            };

            /*!
             * Проходимся по всем свайперам по очереди
             */
            return swipers.each(function() {
              var amount, buttonClass, buttons, container, getAmount, id, localOptions, nextClass, node, prevClass, setHeight, slider;
              node = $(this);
              id = c + '-container--id' + swipers.index(node);
              container = node.find('.' + c + '-container').addClass(id);
              localOptions = defaultOptions;

              /*!
               * Заморачиваемся с высотами
               */
              setHeight = function(newHeight) {
                if (newHeight == null) {
                  newHeight = container.find('.tpl-block-cardbox').first().outerHeight();
                }
                container.animate({
                  height: newHeight + 'px'
                }, 200);
                return node.data('prevHeight', newHeight);
              };
              setHeight();

              /*!
               * При ресайзе, раз в 100мс проверяет, не поменялась ли высота
               * первой карточки, и, если нужно, отправляет на изменение высоты враппера
               */
              $(window).on('resize.swiperHeight', function() {
                var timeoutResize;
                clearTimeout(timeoutResize);
                return timeoutResize = setTimeout(function() {
                  var nowHeight, prevHeight;
                  prevHeight = node.data('prevHeight');
                  nowHeight = container.find('.tpl-block-cardbox').first().outerHeight();
                  if (node.data('prevHeight') !== nowHeight) {
                    log(node[0].className, 'newHeight!');
                    return setHeight(nowHeight);
                  }
                }, 100);
              });

              /*!
               * Определяем, сколько карточек может показаться
               * на текущем брекпоинте
               */
              getAmount = function() {
                var media;
                media = getMedia();
                if (isMod(node, '1or2or3')) {
                  switch (media) {
                    case 'mediaMin':
                      return 1;
                    case 'mediaMid':
                      return 2;
                    case 'mediaMax':
                      return 3;
                  }
                } else if (isMod(node, '1or2or4')) {
                  switch (media) {
                    case 'mediaMin':
                      return 1;
                    case 'mediaMid':
                      return 2;
                    case 'mediaMax':
                      return 4;
                  }
                } else if (isMod(node, '1or3or4')) {
                  switch (media) {
                    case 'mediaMin':
                      return 1;
                    case 'mediaMid':
                      return 3;
                    case 'mediaMax':
                      return 4;
                  }
                } else {
                  if (media === 'min') {
                    return 1;
                  } else {
                    return 4;
                  }
                }
              };
              amount = getAmount();
              node.data('prevAmount', amount);
              localOptions.slidesPerView = amount;

              /*!
               * Когда меняется брекпоинт, то, если нужно,
               * пересчитываем количетво карточек и их высоты
               */
              $(window).on('mediaMin mediaMid mediaMax', function() {
                var nowAmount, prevAmount;
                nowAmount = getAmount();
                prevAmount = node.data('prevAmount');
                if (nowAmount !== prevAmount) {
                  node.data('prevAmount', nowAmount);
                  slider.params.slidesPerView = nowAmount;
                  return slider.reInit();
                }
              });

              /*!
               * Опции для свайпера со скроллбаром
               */
              if (isMod(node, 'with-scrollbar')) {
                localOptions = {
                  scrollContainer: false,
                  loop: false,
                  onFirstInit: function() {
                    return after(1000, function() {
                      return w.trigger('openFooterTabsBySwiper');
                    });
                  },
                  scrollbar: {
                    container: '.' + c + '-scrollbar',
                    hide: false,
                    draggable: true,
                    snapOnRelease: true
                  }
                };
              }

              /*!
               * Запускаем текущий свайпер с нужными опциями
               */
              slider = swipeIt(id, defaultOptions, localOptions);

              /*!
               * Управление кнопками
               */
              buttonClass = 'tpl-block-prevnext-button';
              prevClass = buttonClass + '--prev';
              nextClass = buttonClass + '--next';
              buttons = node.find('.' + buttonClass);
              return buttons.on('click', function() {
                var button;
                button = $(this);
                if (button.hasClass(prevClass)) {
                  return slider.swipePrev();
                } else {
                  return slider.swipeNext();
                }
              });
            });
          });
        }
      });

      /*!
       * Табы
       */
      $(function() {
        var c, q;
        c = 'tpl-block-tabs';
        q = '.' + c;
        if ($(q)[0]) {
          return $(q).each(function() {
            var accordionToTabs, content, isFooterTabs, node, switcher, tabs, tabsToAccordion, trigger, wrapper;
            node = $(this);
            tabs = node.find(q + '-tab');
            content = node.find(q + '-content');
            wrapper = node.find(q + '-wrapper');
            switcher = node.find(q + '-switcher');
            isFooterTabs = node.hasClass(c + '--footer') ? true : false;
            if (isFooterTabs) {
              trigger = node.find(q + '-trigger');
            }
            if (isFooterTabs) {
              w.on('openFooterTabs', function() {
                var wrapperAutoHeight;
                wrapperAutoHeight = getAutoHeight(wrapper);
                wrapper.removeClass(hiddenClass);
                trigger.addClass(activeClass);
                return wrapper.stop().animate({
                  height: wrapperAutoHeight
                }, 200);
              });
              w.on('closeFooterTabs', function() {
                wrapper.addClass(hiddenClass);
                trigger.removeClass(activeClass);
                return wrapper.stop().animate({
                  height: 0
                }, 200);
              });
              w.on('openFooterTabsBySwiper', function() {
                if (trigger.hasClass(activeClass)) {
                  return w.trigger('openFooterTabs');
                }
              });
              trigger.on('click', function() {
                if (trigger.hasClass(activeClass)) {
                  return w.trigger('closeFooterTabs');
                } else {
                  return w.trigger('openFooterTabs');
                }
              });
            }
            tabs.on('click', function() {
              var newHeight, nextContent, nextIndex, nextTab, oldHeight, prevContent, prevIndex, prevTab;
              prevTab = tabs.filter('.' + currentClass);
              nextTab = $(this);
              prevIndex = tabs.index(prevTab);
              nextIndex = tabs.index(nextTab);
              prevContent = content.eq(prevIndex);
              nextContent = content.eq(nextIndex);
              if (isFooterTabs) {
                if (!trigger.hasClass(activeClass)) {
                  w.trigger('openFooterTabs');
                }
              }
              if (nextIndex === prevIndex && !isFooterTabs) {
                return false;
              } else {
                oldHeight = prevContent.css('height');
                newHeight = getAutoHeight(nextContent);
                prevTab.removeClass(currentClass);
                nextTab.addClass(currentClass);
                prevContent.removeClass(currentClass).css('height', 0);
                nextContent.stop().css('height', oldHeight).animate({
                  height: newHeight
                }, 200).addClass(currentClass);
                tabs.removeClass(currentClass);
                return nextTab.addClass(currentClass);
              }
            });
            if (!node.hasClass(c + '--footer')) {
              tabsToAccordion = function() {
                return tabs.each(function() {
                  var i, nextTab;
                  nextTab = $(this);
                  i = tabs.index(nextTab);
                  return nextTab.insertBefore(content.eq(nextIndex));
                });
              };
              accordionToTabs = function() {
                return tabs.appendTo(switcher);
              };
              if (isMedia('mediaMin')) {
                tabsToAccordion();
              }
              $(window).on('mediaMin', function() {
                return tabsToAccordion();
              });
              return $(window).on('mediaMid mediaMax', function() {
                return accordionToTabs();
              });
            }
          });
        }
      });

      /*!
       * Выпадайки с городами и телефонами
       */

      /*!
       * Фильтр каталога в телефоне
       */
      $(function() {
        var drop, q;
        q = '.tpl-block-asidefilter';
        if ($(q)[0]) {
          drop = $(q);
          return drop.find(q + '-trigger').first().on('click', function() {
            var cssHeight, dropHide, dropShow;
            cssHeight = drop.css('height');
            dropHide = function() {
              drop.stop().animate({
                height: 150
              }, 200);
              return drop.removeClass(activeClass);
            };
            dropShow = function() {
              var autoHeight;
              autoHeight = drop.css('height', 'auto').outerHeight();
              drop.height(cssHeight).stop().animate({
                height: autoHeight
              }, 200);
              return drop.addClass(activeClass);
            };
            if (drop.hasClass(activeClass)) {
              return dropHide();
            } else {
              return dropShow();
            }
          });
        }
      });

      /*!
       * Выбор цвета на телефоне
       */
      $(function() {
        var colors, drop, q;
        q = '.tpl-block-colors';
        if ($(q)[0]) {
          drop = $(q);
          colors = $(q + '-item');
          return colors.on('mousedown', function() {
            var autoHeight, color, cssHeight, curHeight;
            if (isMeida('min')) {
              color = $(this);
              cssHeight = drop.css('height');
              curHeight = drop.height();
              if (drop.hasClass(activeClass)) {
                drop.stop().animate({
                  height: 85
                }, 200);
                return drop.removeClass(activeClass);
              } else {
                autoHeight = drop.css('height', 'auto').outerHeight();
                drop.height(cssHeight).stop().animate({
                  height: autoHeight
                }, 200);
                return drop.addClass(activeClass);
              }
            }
          });
        }
      });

      /*!
       * Мобильная корзина
       */
      $(function() {
        var node, q;
        q = '.tpl-block-mobilecart';
        if ($(q)[0]) {
          node = $(q);
          node.find(q + '-showimage').on('click', function() {
            var image, item, showimg;
            showimg = $(this);
            item = showimg.parents(q + '-item');
            image = item.find('.tpl-field-image');
            image.stop().slideToggle(200);
            return item.toggleClass(activeClass);
          });
          return node.find(q + '-delete').on('click', function() {
            var del, item;
            del = $(this);
            item = del.parents(q + '-item');
            return item.stop().slideUp(200);
          });
        }
      });

      /*!
       * Мобильный каталог
       */
      $(function() {
        var cats, drops, menu, q, titles;
        q = '.tpl-block-mobilemenu';
        if ($(q)[0]) {
          menu = $(q);
          titles = menu.find(q + '-title');
          cats = menu.find(q + '-category');
          drops = menu.find(q + '-drop');
          return titles.on('click', function() {
            var cat, drop, title;
            title = $(this);
            cat = title.parents(q + '-category');
            drop = title.siblings(q + '-drop');
            if (cat.hasClass(activeClass)) {
              drop.stop().slideUp(200);
              return cat.removeClass(activeClass);
            } else {
              drops.stop().slideUp(200);
              cats.removeClass(activeClass);
              cat.addClass(activeClass);
              return drop.stop().slideDown(200);
            }
          });
        }
      });

      /*!
       * Выпадайки в мобильной навигации
       */
      $(function() {
        var drops, dropsSelector, itemClass, itemSelector, items, links, menuClass, menuSelector;
        menuClass = 'tpl-block-mobilenav';
        dropsSelector = '.tpl-block-headerdrop';
        menuSelector = '.' + menuClass;
        itemClass = menuClass + '-item';
        itemSelector = '.' + itemClass;
        if ($(menuSelector)[0]) {
          items = $(itemSelector);
          links = $('a', itemSelector);
          drops = $(dropsSelector);
          return links.on('click', function(e) {
            var closeDrops, item, openDrop;
            item = $(this).parents(itemSelector);
            if (!item.hasClass(itemClass + '--logo')) {
              e.preventDefault();
              closeDrops = function() {
                items.removeClass(activeClass);
                drops.removeClass(activeClass);
                return drops.stop().slideUp(200);
              };
              openDrop = function(id) {
                var drop;
                closeDrops();
                drop = $(dropsSelector + '--' + id);
                drop.addClass(activeClass);
                drop.stop().slideDown(200);
                return item.addClass(activeClass);
              };
              if (item.hasClass(activeClass)) {
                return closeDrops();
              } else {
                if (item.hasClass(itemClass + '--menu')) {
                  openDrop('menu');
                }
                if (item.hasClass(itemClass + '--search')) {
                  openDrop('search');
                }
                if (item.hasClass(itemClass + '--cart')) {
                  openDrop('cart');
                }
                if (item.hasClass(itemClass + '--user')) {
                  return openDrop('user');
                }
              }
            }
          });
        }
      });

      /*!
       * Счётчик с плюсом/минусом
       */
      window.tpl_init_qty_buttons = function() {
        var blockSelector, buttonSelector, c, clickEvent, lessClass, moreClass, q, valueSelector;
        c = 'tpl-block-amountchoice';
        q = '.' + c;
        clickEvent = 'click.qty_buttons';
        if ($(q)[0]) {
          blockSelector = q;
          valueSelector = q + '-value span';
          buttonSelector = q + '-button';
          moreClass = c + '-button--more';
          lessClass = c + '-button--less';
          $(valueSelector).each(function() {
            var block, i, self;
            self = $(this);
            i = parseInt(self.text());
            if (i === 1) {
              block = self.parents(blockSelector);
              return block.find('.' + lessClass).addClass(disabledClass);
            }
          });
          return $(buttonSelector).off(clickEvent).on(clickEvent, function() {
            var block, button, buttons, i, value, valueInput;
            button = $(this);
            if (!button.hasClass(disabledClass)) {
              block = button.parents(blockSelector);
              value = block.find(valueSelector);
              valueInput = value.siblings('INPUT');
              buttons = block.find(buttonSelector);
              i = parseInt(value.text());
              if (i > 0) {
                if (button.hasClass(moreClass)) {
                  value.text(i + 1);
                  valueInput.val(i + 1);
                  return buttons.removeClass(disabledClass);
                } else {
                  if (i - 1 === 1) {
                    button.addClass(disabledClass);
                  }
                  valueInput.val(i - 1);
                  return value.text(i - 1);
                }
              }
            }
          });
        }
      };
      $(function() {
        return window.tpl_init_qty_buttons();
      });

      /*!
       * Изменённые селектбоксы
       * http://harvesthq.github.io/chosen/
       */
      $(function() {
        var selects;
        selects = $('.tpl-block-iselect');
        if (selects[0]) {
          return r('chosen', function() {
            selects.chosen({
              disable_search_threshold: 10,
              width: '100%'
            });
            selects.on('change', function() {
              return $(window).trigger('s');
            });
            return selects.trigger('chosen:updated');
          });
        }
      });

      /*!
      * Слайдеры значений
      * http://refreshless.com/nouislider/
       */
      $(function() {
        var c, q, ranges;
        c = 'tpl-block-range';
        q = '.' + c;
        ranges = $(q);
        if (ranges[0]) {
          return r('range-slider', function() {
            return ranges.each(function() {
              var max, maxInput, min, minInput, range, slider, startMax, startMin;
              range = $(this);
              slider = range.find(q + '-slider').first();
              minInput = range.find(q + '-min').first();
              maxInput = range.find(q + '-max').first();
              min = slider.data('min') || minInput.val().replace(/[^0-9.]/g, '');
              max = slider.data('max') || maxInput.val().replace(/[^0-9.]/g, '');
              startMin = slider.data('startMin') || min;
              startMax = slider.data('startMax') || max;
              return slider.noUiSlider({
                range: [min, max],
                start: [startMin, startMax],
                handles: 2,
                step: slider.data('step'),
                serialization: {
                  to: [minInput, maxInput],
                  resolution: slider.data('resolution')
                }
              });
            });
          });
        }
      });

      /*!
       * Каталог
       */
      $(function() {
        var c, catalog, listClass, node, plateClass, q, switchToList, switchToPlate;
        c = 'tpl-block-catalog';
        q = '.' + c;
        catalog = $(q);
        if (catalog[0]) {
          node = $(q);

          /*!
           * Переключалка список / плитка
           */
          plateClass = c + '--view_plate';
          listClass = c + '--view_list';
          switchToPlate = $('.tpl-block-platelist-button--plate');
          switchToList = $('.tpl-block-platelist-button--list');
          switchToPlate.on('click', function() {
            switchToList.removeClass(activeClass);
            switchToPlate.addClass(activeClass);
            return node.removeClass(listClass).addClass(plateClass);
          });
          return switchToList.on('click', function() {
            switchToPlate.removeClass(activeClass);
            switchToList.addClass(activeClass);
            return node.removeClass(plateClass).addClass(listClass);
          });
        }
      });

      /*!
       * Галереи
       * http://fotorama.io
       */
      $(function() {
        var fotoraming, galleries;
        fotoraming = function(galleries) {
          return galleries.each(function() {
            return $(this).fotorama({
              nav: 'thumbs',
              arrows: false,
              height: 440,
              thumbwidth: 90,
              thumbheight: 90,
              thumbmargin: 20,
              thumbborderwidth: 5
            });
          });
        };
        galleries = $('.tpl-block-gallery');
        if (galleries[0]) {
          r('fotorama', function() {
            return fotoraming(galleries);
          });
        }
        return $(window).on('galleryPopup', function() {
          galleries = $('.tpl-block-gallery');
          return r('fotorama', function() {
            return fotoraming(galleries);
          });
        });
      });

      /*!
       * Слайдер на главной
       * http://fotorama.io
       */
      $(function() {
        var getHeight, hero, next, prev, q, setHeight, slider;
        q = '.tpl-block-hero';
        if ($(q)[0]) {
          hero = $(q);
          slider = hero.find(q + '-slider');
          prev = hero.find('.tpl-block-prevnext-button--prev');
          next = hero.find('.tpl-block-prevnext-button--next');
          getHeight = function() {
            if (isMedia('mediaMin')) {
              return 630;
            } else {
              return '100%';
            }
          };
          setHeight = function(f, h) {
            return f.resize({
              height: h
            });
          };
          return r('fotorama', function() {
            var f;
            slider.on('fotorama:ready', function(e, fotorama, extra) {
              setHeight(fotorama, getHeight());
              return $(window).on('mediaMin mediaMid mediaMax', function() {
                return setHeight(slider, getHeight());
              });
            });
            slider.fotorama({
              nav: 'none',
              arrows: false,
              margin: 20,
              height: '100%',
              width: '100%',
              loop: true,
              shadows: false
            });
            f = slider.data('fotorama');
            prev.on('click', function() {
              return f.show('<');
            });
            return next.on('click', function() {
              return f.show('>');
            });
          });
        }
      });

      /*!
       * Сравнение
       * http://www.fixedheadertable.com
       */
      $(function() {
        var area, areaWidth, c, calc, col, colw, doubler, next, node, nodeWidth, pos, prev, q, viewport;
        c = 'tpl-block-comparision';
        q = '.' + c;
        if ($(q)[0]) {
          node = $(q);
          viewport = node.find(q + '-original');
          doubler = node.find(q + '-doubler');
          doubler = viewport.clone().removeClass(c + '-original').addClass(c + '-doubler');
          doubler.find('td').detach();
          doubler.insertAfter(viewport);
          area = viewport.find('table');
          prev = doubler.find('.tpl-block-prevnext-button--prev').first();
          next = doubler.find('.tpl-block-prevnext-button--next').first();
          pos = 0;
          prev.addClass(disabledClass);
          col = area.find('td').first();
          nodeWidth = node.outerWidth();
          areaWidth = area.outerWidth();
          colw = col.outerWidth();
          calc = function() {
            nodeWidth = node.outerWidth();
            areaWidth = area.outerWidth();
            return colw = col.outerWidth();
          };
          if (area.find('tr:first td').length <= 3) {
            next.addClass(disabledClass);
          }
          $(window).on('mediaMid mediaMax', function() {
            calc();
            return viewport.scrollLeft(colw * pos);
          });
          next.on('click', function() {
            var l;
            l = viewport.scrollLeft();
            if (l + colw + nodeWidth >= areaWidth) {
              next.addClass(disabledClass);
            }
            if (l + nodeWidth < areaWidth) {
              prev.removeClass(disabledClass);
              return viewport.animate({
                scrollLeft: '+=' + colw
              }, 200, function() {
                return pos++;
              });
            }
          });
          return prev.on('click', function() {
            var l;
            l = viewport.scrollLeft();
            if (l - colw <= 0) {
              prev.addClass(disabledClass);
            }
            if (l > 0) {
              next.removeClass(disabledClass);
              return viewport.animate({
                scrollLeft: '-=' + colw
              }, 200, function() {
                return pos--;
              });
            }
          });
        }
      });

      /*!
       * Странные штуки на главной странице:
       * по отдельному сайту на разрешение
       */
      $(function() {
        var layout, news;
        if ($('.tpl-block-content--frontpage')[0]) {
          layout = $('.tpl-block-frontlayout');
          news = $('.tpl-block-frontlayout-news');
          if (isMedia('mediaMin')) {
            news.appendTo(layout);
          }
          $(window).on('mediaMin', function() {
            return news.appendTo(layout);
          });
          return $(window).on('mediaMid mediaMax', function() {
            return news.prependTo(layout);
          });
        }
      });

      /*!
       * Лайтбоксы
       * http://dimsemenov.com/plugins/magnific-popup/
       */
      $(function() {
        return r('magnific-popup', function() {
          return $('.tpl-link-modal').magnificPopup({
            midClick: true,
            mainClass: 'tpl-block-mfp-animating',
            removalDelay: 200,
            type: 'inline',
            closeMarkup: '<div class="tpl-block-mfp-close"><i class="icon-popup-close"></i></div>'
          });
        });
      });

      /*
       * Переход по ссылке «Подробное описание» в полном просмотре товаров
       */
      $(function() {
        $('.tpl-block-cardshortdesc a.tpl-link-more').on('click', function() {
          var tabSwitcher;
          tabSwitcher = $('.tpl-block-tabs-switcher .tpl-block-tabs-tab').eq(0).click();
          $('HTML, BODY').animate({
            scrollTop: tabSwitcher.offset().top
          });
          return false;
        });
      });

      /*
       * Добавление/удаление в сравнение и избранное
       */
      $(function() {
        return $(document).on('click', '.tpl-block-button-compare, .tpl-block-button-favorite', function() {
          var $this;
          $this = $(this);
          $.ajax({
            url: $this.attr('href'),
            dataType: 'html',
            success: function(data) {
              var $data, $newItem, $wrapper, container, selector1, selector2;
              container = $this.is('.tpl-block-button-compare') ? 1 : 2;
              $data = $('<div/>').html(data);
              selector1 = '.tpl-block-tabs--footer .tpl-block-tabs-wrapper .tpl-block-layoutwidth .tpl-block-swiper-container';
              $(selector1).eq(container).find('.tpl-block-swiper-item').remove();
              $wrapper = $(selector1).eq(container).find('.tpl-block-swiper-wrapper');
              $newItem = $data.find('.tpl-block-tabs--footer .tpl-block-tabs-wrapper .tpl-block-swiper-container').eq(container).find('.tpl-block-swiper-item');
              $(selector1).eq(container).height(315);
              $wrapper.prepend($newItem);
              selector2 = '.tpl-block-tabs--footer .tpl-block-compare-button-container';
              $(selector2).html($data.find(selector2).html());
              $(selector1).eq(container).data('slider').reInit();
              $('div.tpl-block-tabs-switcher div.tpl-block-tabs-tab.tpl-state-current').click();
            }
          });
          $.magnificPopup.open({
            items: {
              src: $this.is('.tpl-block-button-compare') ? '#goodslist-compare-added' : '#goodslist-favorite-added'
            },
            mainClass: 'tpl-block-mfp-animating',
            removalDelay: 200,
            type: 'inline',
            closeMarkup: '<div class="tpl-block-mfp-close"><i class="icon-popup-close"></i></div>'
          });
          return false;
        });
      });

      /*
       * Нажатие на ссылку в всплывающем окне «Добавлено в [список]»
       */
      $(function() {
        $('#goodslist-favorite-added a.tpl-block-link, #goodslist-favorite-removed a.tpl-block-link, #goodslist-compare-added a.tpl-block-link').on('click', function() {
          var $parent, $this, tabSwitcher;
          $this = $(this);
          $parent = $this.closest('.tpl-block-footerpopup');
          tabSwitcher = $('.tpl-block-tabs--footer .tpl-block-tabs-switcher .tpl-block-tabs-tab');
          if ($parent.is('#goodslist-favorite-added') || $parent.is('#goodslist-favorite-removed')) {
            tabSwitcher = tabSwitcher.eq(2);
          } else if ($parent.is('#goodslist-compare-added')) {
            tabSwitcher = tabSwitcher.eq(1);
          } else {
            return false;
          }
          $.magnificPopup.close();
          tabSwitcher.triggerHandler('click');
          $('html, body').animate({
            scrollTop: tabSwitcher.offset().top
          });
          return false;
        });
      });

      /*
       * Добавление комментария
       */
      $(function() {
        var tabSwitcher;
        if (window.location.hash === '#comment-added') {
          tabSwitcher = $('.tpl-block-tabs-switcher .tpl-block-tabs-tab').eq(2).click();
          return $('html, body').animate({
            scrollTop: tabSwitcher.offset().top
          });
        }
      });

      /*
       * Подписка
       */
      $(function() {
        $('FORM.tpl-block-footersubscribe').on('submit', function() {
          var $this, email, regexp;
          $this = $(this);
          email = $this.find('INPUT[name="fields[Email]"]').val();
          regexp = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
          if (regexp.test(email)) {
            $.post($this.attr('action'), $this.serializeArray());
            $.magnificPopup.open({
              items: {
                src: '#subscriber-added'
              },
              mainClass: 'tpl-block-mfp-animating',
              removalDelay: 200,
              type: 'inline',
              closeMarkup: '<div class="tpl-block-mfp-close"><i class="icon-popup-close"></i></div>'
            });
            return false;
          }
        });
      });

      /*
       * Нажатие на звёздочки рейтинга
       */
      $(function() {
        $(document).on('click', '.tpl-block-rating > A', function() {
          var $block, $this, responseHandler;
          $this = $(this);
          $block = $this.closest('.tpl-block-rating');
          responseHandler = function(data) {
            var $data, index, match, regexp;
            regexp = /tpl-state-index(\d+)/i;
            match = regexp.exec($block.attr('class'));
            if (match) {
              index = parseInt(match[1]);
              $data = $('<div/>').html(data);
              $block.replaceWith($data.find('.tpl-block-rating').eq(index));
            }
          };
          $.post($this.attr('href'), responseHandler);
          return false;
        });
      });

      /*
       * Выпадающие списки
       */
      return $(function() {
        var close_all_dropdowns;
        close_all_dropdowns = function() {
          return $('ul.tpl-block-dropdown').slideUp(150);
        };
        $('ul.tpl-block-dropdown').click(function(e) {
          return e.stopPropagation();
        });
        $('body').click(function() {
          return close_all_dropdowns();
        });
        return $('.tpl-block-dropdown-link').click(function() {
          close_all_dropdowns();
          $($(this).data('target')).css({
            'min-width': $(this).width()
          }).slideDown(200);
          return false;
        });
      });
    });
  })(window.jQuery, window);

}).call(this);
